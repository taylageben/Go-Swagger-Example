// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteTodoNoContentCode is the HTTP code returned for type DeleteTodoNoContent
const DeleteTodoNoContentCode int = 204

/*DeleteTodoNoContent delete todo no content

swagger:response deleteTodoNoContent
*/
type DeleteTodoNoContent struct {

	/*
	  In: Body
	*/
	Payload DeleteTodoNoContentBody `json:"body,omitempty"`
}

// NewDeleteTodoNoContent creates DeleteTodoNoContent with default headers values
func NewDeleteTodoNoContent() *DeleteTodoNoContent {
	return &DeleteTodoNoContent{}
}

// WithPayload adds the payload to the delete todo no content response
func (o *DeleteTodoNoContent) WithPayload(payload DeleteTodoNoContentBody) *DeleteTodoNoContent {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete todo no content response
func (o *DeleteTodoNoContent) SetPayload(payload DeleteTodoNoContentBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTodoNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteTodoUnauthorizedCode is the HTTP code returned for type DeleteTodoUnauthorized
const DeleteTodoUnauthorizedCode int = 401

/*DeleteTodoUnauthorized delete todo unauthorized

swagger:response deleteTodoUnauthorized
*/
type DeleteTodoUnauthorized struct {

	/*
	  In: Body
	*/
	Payload DeleteTodoUnauthorizedBody `json:"body,omitempty"`
}

// NewDeleteTodoUnauthorized creates DeleteTodoUnauthorized with default headers values
func NewDeleteTodoUnauthorized() *DeleteTodoUnauthorized {
	return &DeleteTodoUnauthorized{}
}

// WithPayload adds the payload to the delete todo unauthorized response
func (o *DeleteTodoUnauthorized) WithPayload(payload DeleteTodoUnauthorizedBody) *DeleteTodoUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete todo unauthorized response
func (o *DeleteTodoUnauthorized) SetPayload(payload DeleteTodoUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTodoUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteTodoForbiddenCode is the HTTP code returned for type DeleteTodoForbidden
const DeleteTodoForbiddenCode int = 403

/*DeleteTodoForbidden delete todo forbidden

swagger:response deleteTodoForbidden
*/
type DeleteTodoForbidden struct {

	/*
	  In: Body
	*/
	Payload DeleteTodoForbiddenBody `json:"body,omitempty"`
}

// NewDeleteTodoForbidden creates DeleteTodoForbidden with default headers values
func NewDeleteTodoForbidden() *DeleteTodoForbidden {
	return &DeleteTodoForbidden{}
}

// WithPayload adds the payload to the delete todo forbidden response
func (o *DeleteTodoForbidden) WithPayload(payload DeleteTodoForbiddenBody) *DeleteTodoForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete todo forbidden response
func (o *DeleteTodoForbidden) SetPayload(payload DeleteTodoForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTodoForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteTodoNotFoundCode is the HTTP code returned for type DeleteTodoNotFound
const DeleteTodoNotFoundCode int = 404

/*DeleteTodoNotFound delete todo not found

swagger:response deleteTodoNotFound
*/
type DeleteTodoNotFound struct {

	/*
	  In: Body
	*/
	Payload DeleteTodoNotFoundBody `json:"body,omitempty"`
}

// NewDeleteTodoNotFound creates DeleteTodoNotFound with default headers values
func NewDeleteTodoNotFound() *DeleteTodoNotFound {
	return &DeleteTodoNotFound{}
}

// WithPayload adds the payload to the delete todo not found response
func (o *DeleteTodoNotFound) WithPayload(payload DeleteTodoNotFoundBody) *DeleteTodoNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete todo not found response
func (o *DeleteTodoNotFound) SetPayload(payload DeleteTodoNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTodoNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteTodoInternalServerErrorCode is the HTTP code returned for type DeleteTodoInternalServerError
const DeleteTodoInternalServerErrorCode int = 500

/*DeleteTodoInternalServerError delete todo internal server error

swagger:response deleteTodoInternalServerError
*/
type DeleteTodoInternalServerError struct {

	/*
	  In: Body
	*/
	Payload DeleteTodoInternalServerErrorBody `json:"body,omitempty"`
}

// NewDeleteTodoInternalServerError creates DeleteTodoInternalServerError with default headers values
func NewDeleteTodoInternalServerError() *DeleteTodoInternalServerError {
	return &DeleteTodoInternalServerError{}
}

// WithPayload adds the payload to the delete todo internal server error response
func (o *DeleteTodoInternalServerError) WithPayload(payload DeleteTodoInternalServerErrorBody) *DeleteTodoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete todo internal server error response
func (o *DeleteTodoInternalServerError) SetPayload(payload DeleteTodoInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTodoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
