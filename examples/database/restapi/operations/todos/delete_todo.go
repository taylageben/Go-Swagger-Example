// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// DeleteTodoHandlerFunc turns a function with the right signature into a delete todo handler
type DeleteTodoHandlerFunc func(DeleteTodoParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTodoHandlerFunc) Handle(params DeleteTodoParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteTodoHandler interface for that can handle valid delete todo params
type DeleteTodoHandler interface {
	Handle(DeleteTodoParams, interface{}) middleware.Responder
}

// NewDeleteTodo creates a new http.Handler for the delete todo operation
func NewDeleteTodo(ctx *middleware.Context, handler DeleteTodoHandler) *DeleteTodo {
	return &DeleteTodo{Context: ctx, Handler: handler}
}

/*DeleteTodo swagger:route DELETE /todos/{todoId} Todos deleteTodo

Delete Todo

*/
type DeleteTodo struct {
	Context *middleware.Context
	Handler DeleteTodoHandler
}

func (o *DeleteTodo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTodoParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteTodoForbiddenBody delete todo forbidden body
// swagger:model DeleteTodoForbiddenBody
type DeleteTodoForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete todo forbidden body
func (o *DeleteTodoForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTodoForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodoForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTodoForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTodoForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteTodoForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteTodoInternalServerErrorBody delete todo internal server error body
// swagger:model DeleteTodoInternalServerErrorBody
type DeleteTodoInternalServerErrorBody interface{}

// DeleteTodoNoContentBody delete todo no content body
// swagger:model DeleteTodoNoContentBody
type DeleteTodoNoContentBody interface{}

// DeleteTodoNotFoundBody delete todo not found body
// swagger:model DeleteTodoNotFoundBody
type DeleteTodoNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this delete todo not found body
func (o *DeleteTodoNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTodoNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodoNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *DeleteTodoNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodoNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTodoNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTodoNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteTodoNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteTodoUnauthorizedBody delete todo unauthorized body
// swagger:model DeleteTodoUnauthorizedBody
type DeleteTodoUnauthorizedBody interface{}
