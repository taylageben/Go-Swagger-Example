// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"span/go-swagger-example/examples/database/models"
)

// PostTodosCreatedCode is the HTTP code returned for type PostTodosCreated
const PostTodosCreatedCode int = 201

/*PostTodosCreated post todos created

swagger:response postTodosCreated
*/
type PostTodosCreated struct {

	/*
	  In: Body
	*/
	Payload *models.TodoFull `json:"body,omitempty"`
}

// NewPostTodosCreated creates PostTodosCreated with default headers values
func NewPostTodosCreated() *PostTodosCreated {
	return &PostTodosCreated{}
}

// WithPayload adds the payload to the post todos created response
func (o *PostTodosCreated) WithPayload(payload *models.TodoFull) *PostTodosCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post todos created response
func (o *PostTodosCreated) SetPayload(payload *models.TodoFull) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTodosCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTodosUnauthorizedCode is the HTTP code returned for type PostTodosUnauthorized
const PostTodosUnauthorizedCode int = 401

/*PostTodosUnauthorized post todos unauthorized

swagger:response postTodosUnauthorized
*/
type PostTodosUnauthorized struct {

	/*
	  In: Body
	*/
	Payload PostTodosUnauthorizedBody `json:"body,omitempty"`
}

// NewPostTodosUnauthorized creates PostTodosUnauthorized with default headers values
func NewPostTodosUnauthorized() *PostTodosUnauthorized {
	return &PostTodosUnauthorized{}
}

// WithPayload adds the payload to the post todos unauthorized response
func (o *PostTodosUnauthorized) WithPayload(payload PostTodosUnauthorizedBody) *PostTodosUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post todos unauthorized response
func (o *PostTodosUnauthorized) SetPayload(payload PostTodosUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTodosUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PostTodosForbiddenCode is the HTTP code returned for type PostTodosForbidden
const PostTodosForbiddenCode int = 403

/*PostTodosForbidden post todos forbidden

swagger:response postTodosForbidden
*/
type PostTodosForbidden struct {

	/*
	  In: Body
	*/
	Payload PostTodosForbiddenBody `json:"body,omitempty"`
}

// NewPostTodosForbidden creates PostTodosForbidden with default headers values
func NewPostTodosForbidden() *PostTodosForbidden {
	return &PostTodosForbidden{}
}

// WithPayload adds the payload to the post todos forbidden response
func (o *PostTodosForbidden) WithPayload(payload PostTodosForbiddenBody) *PostTodosForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post todos forbidden response
func (o *PostTodosForbidden) SetPayload(payload PostTodosForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTodosForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PostTodosNotFoundCode is the HTTP code returned for type PostTodosNotFound
const PostTodosNotFoundCode int = 404

/*PostTodosNotFound post todos not found

swagger:response postTodosNotFound
*/
type PostTodosNotFound struct {

	/*
	  In: Body
	*/
	Payload PostTodosNotFoundBody `json:"body,omitempty"`
}

// NewPostTodosNotFound creates PostTodosNotFound with default headers values
func NewPostTodosNotFound() *PostTodosNotFound {
	return &PostTodosNotFound{}
}

// WithPayload adds the payload to the post todos not found response
func (o *PostTodosNotFound) WithPayload(payload PostTodosNotFoundBody) *PostTodosNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post todos not found response
func (o *PostTodosNotFound) SetPayload(payload PostTodosNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTodosNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PostTodosInternalServerErrorCode is the HTTP code returned for type PostTodosInternalServerError
const PostTodosInternalServerErrorCode int = 500

/*PostTodosInternalServerError post todos internal server error

swagger:response postTodosInternalServerError
*/
type PostTodosInternalServerError struct {

	/*
	  In: Body
	*/
	Payload PostTodosInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostTodosInternalServerError creates PostTodosInternalServerError with default headers values
func NewPostTodosInternalServerError() *PostTodosInternalServerError {
	return &PostTodosInternalServerError{}
}

// WithPayload adds the payload to the post todos internal server error response
func (o *PostTodosInternalServerError) WithPayload(payload PostTodosInternalServerErrorBody) *PostTodosInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post todos internal server error response
func (o *PostTodosInternalServerError) SetPayload(payload PostTodosInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTodosInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
